package com.name.cn.mydiary.data.source.local.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.name.cn.mydiary.data.bookdetail.Memorandum;
import com.name.cn.mydiary.data.source.local.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMORANDUM".
*/
public class MemorandumDao extends AbstractDao<Memorandum, Long> {

    public static final String TABLENAME = "MEMORANDUM";

    /**
     * Properties of entity Memorandum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemorandumOwnerId = new Property(1, Long.class, "memorandumOwnerId", false, "MEMORANDUM_OWNER_ID");
        public final static Property MemorandumItemOwnId = new Property(2, Long.class, "memorandumItemOwnId", false, "MEMORANDUM_ITEM_OWN_ID");
    }

    private DaoSession daoSession;

    private Query<Memorandum> bookList_MemorandumListQuery;

    public MemorandumDao(DaoConfig config) {
        super(config);
    }
    
    public MemorandumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMORANDUM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MEMORANDUM_OWNER_ID\" INTEGER," + // 1: memorandumOwnerId
                "\"MEMORANDUM_ITEM_OWN_ID\" INTEGER);"); // 2: memorandumItemOwnId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMORANDUM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Memorandum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long memorandumOwnerId = entity.getMemorandumOwnerId();
        if (memorandumOwnerId != null) {
            stmt.bindLong(2, memorandumOwnerId);
        }
 
        Long memorandumItemOwnId = entity.getMemorandumItemOwnId();
        if (memorandumItemOwnId != null) {
            stmt.bindLong(3, memorandumItemOwnId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Memorandum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long memorandumOwnerId = entity.getMemorandumOwnerId();
        if (memorandumOwnerId != null) {
            stmt.bindLong(2, memorandumOwnerId);
        }
 
        Long memorandumItemOwnId = entity.getMemorandumItemOwnId();
        if (memorandumItemOwnId != null) {
            stmt.bindLong(3, memorandumItemOwnId);
        }
    }

    @Override
    protected final void attachEntity(Memorandum entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Memorandum readEntity(Cursor cursor, int offset) {
        Memorandum entity = new Memorandum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // memorandumOwnerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // memorandumItemOwnId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Memorandum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemorandumOwnerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMemorandumItemOwnId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Memorandum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Memorandum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Memorandum entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "memorandumList" to-many relationship of BookList. */
    public List<Memorandum> _queryBookList_MemorandumList(Long memorandumOwnerId) {
        synchronized (this) {
            if (bookList_MemorandumListQuery == null) {
                QueryBuilder<Memorandum> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MemorandumOwnerId.eq(null));
                bookList_MemorandumListQuery = queryBuilder.build();
            }
        }
        Query<Memorandum> query = bookList_MemorandumListQuery.forCurrentThread();
        query.setParameter(0, memorandumOwnerId);
        return query.list();
    }

}
