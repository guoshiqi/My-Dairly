package com.name.cn.mydiary.data.source.local.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.name.cn.mydiary.data.bookdetail.Diary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY".
*/
public class DiaryDao extends AbstractDao<Diary, Long> {

    public static final String TABLENAME = "DIARY";

    /**
     * Properties of entity Diary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property DiaryOwnerId = new Property(2, Long.class, "diaryOwnerId", false, "DIARY_OWNER_ID");
        public final static Property JournalOwnId = new Property(3, Long.class, "journalOwnId", false, "JOURNAL_OWN_ID");
    }

    private DaoSession daoSession;

    private Query<Diary> bookList_DiaryListQuery;

    public DiaryDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"DIARY_OWNER_ID\" INTEGER," + // 2: diaryOwnerId
                "\"JOURNAL_OWN_ID\" INTEGER);"); // 3: journalOwnId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Diary entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getName());
 
        Long diaryOwnerId = entity.getDiaryOwnerId();
        if (diaryOwnerId != null) {
            stmt.bindLong(3, diaryOwnerId);
        }
 
        Long journalOwnId = entity.getJournalOwnId();
        if (journalOwnId != null) {
            stmt.bindLong(4, journalOwnId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Diary entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getName());
 
        Long diaryOwnerId = entity.getDiaryOwnerId();
        if (diaryOwnerId != null) {
            stmt.bindLong(3, diaryOwnerId);
        }
 
        Long journalOwnId = entity.getJournalOwnId();
        if (journalOwnId != null) {
            stmt.bindLong(4, journalOwnId);
        }
    }

    @Override
    protected final void attachEntity(Diary entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Diary readEntity(Cursor cursor, int offset) {
        Diary entity = new Diary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // diaryOwnerId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // journalOwnId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Diary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setDiaryOwnerId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setJournalOwnId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Diary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Diary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Diary entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "diaryList" to-many relationship of BookList. */
    public List<Diary> _queryBookList_DiaryList(Long diaryOwnerId) {
        synchronized (this) {
            if (bookList_DiaryListQuery == null) {
                QueryBuilder<Diary> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DiaryOwnerId.eq(null));
                bookList_DiaryListQuery = queryBuilder.build();
            }
        }
        Query<Diary> query = bookList_DiaryListQuery.forCurrentThread();
        query.setParameter(0, diaryOwnerId);
        return query.list();
    }

}
